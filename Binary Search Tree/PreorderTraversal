//Construct BST from given preorder traversal
import java.util.*;
class BinarySearchTree
{
    static Node root=null;
    static class Node
    {
        int key;
        Node left, right;
        public Node(int d)
        {
            key=d;
            left=right=null;
        }
    }
    public static void insert(int key) 
    {
        root= insertRec(root, key);
    }
    public static Node insertRec(Node root, int key) 
    {
        if(root == null)
        {
            root = new Node(key);
            return root;
        }
        if(key < root.key)
        {
            root.left = insertRec(root.left, key);
        }
        else if (key> root.key)
        {
            root.right=insertRec(root.right,key);
        }
        return root;
    }
    public static void inorder(Node root) 
    {
        if(root!=null)
        {
            inorder(root.left);
            System.out.println(root.key);
            inorder(root.right);
        }
    }
    
    public static void preorder(Node root) 
    {
        if(root!=null)
        {
            System.out.println(root.key);
            preorder(root.left);
            preorder(root.right);
        }
    }
    public static void postorder(Node root) 
    {
        if(root!=null)
        {
            postorder(root.left);
            postorder(root.right);
            System.out.println(root.key);
        }
    }
    public static void search (Node root, int key)
    {
        if (root == null)
            System.out.println("Not found");
        else if (root.key==key)
            System.out.println("Found ");
        else if (key < root.key)
            search(root.left, key);
        else if (key> root.key)
            search(root.right, key);
    }

    public static int minValue(Node root)
    {
        int min =root.key;
        Node copy=root;
        while(copy!=null)
        {
            min=copy.key;
            copy=copy.left;
        }
        return min;
    }

    public static int maxValue(Node root)
    {
        int max =root.key;
        Node copy=root;
        while(copy!=null)
        {
            max=copy.key;
            copy=copy.right;
        }
        return max;
    }

    public static void delete(Node root,int key)
    {
        root=deleteRecur(root,key);
    }
    public static Node deleteRecur(Node root, int key)
    {
        if(root==null)
            return root;
        else if (key< root.key)
            root.left=deleteRecur(root.left, key);
        else if(key > root.key)
            root.right=deleteRecur(root.right, key);
        else
        {
            if(root.left==null)
                return root.right;
            else if(root.right == null)
                return root.left;
            else
            {
                root.key= minValue(root.right);  //minimum value
                root.right = deleteRecur(root.right, root.key);
            }
        }
        return root;
    }
    static Scanner scr= new Scanner(System.in);
    public static void main(String[] args) 
    {
        BinarySearchTree tree = new BinarySearchTree();
 
        /* Let us create following BST
              50
           /     \
          30      70
         /  \    /  \
       20   40  60   80 */
        tree.insert(50);
        tree.insert(30);
        tree.insert(20);
        tree.insert(40);
        tree.insert(70);
        tree.insert(60);
        tree.insert(80);
        tree.insert(90);
        // print inorder traversal of the BST
        System.out.println("Inorder");
        tree.inorder(root);
        System.out.println("Preorder");
        tree.preorder(root);
        System.out.println("Postorder");
        tree.postorder(root);
        System.out.print("Enter element to be searched : " );
        int check= 40;
        search(root, check);
        System.out.println("Minimum value is : " +minValue(root));
        System.out.println("Maximum value is : "+maxValue(root));
        
        tree.delete(root,70);
        System.out.println("Inorder");
        tree.inorder(root);
    }
}